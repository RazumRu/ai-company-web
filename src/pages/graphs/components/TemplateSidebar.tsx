import { Card, Divider, Empty, Space, Tag, Typography } from 'antd';
import type { TemplateDto } from '../../../autogenerated';
import { GraphValidationService } from '../../../services/GraphValidationService';
import type { GraphNodeData } from '../types';

const { Title, Text } = Typography;

interface TemplateSidebarProps {
  onTemplateClick: (template: TemplateDto) => void;
  templates: TemplateDto[];
  selectedNode?: any;
  allNodes?: any[];
}

export const TemplateSidebar = ({
  onTemplateClick,
  templates,
  selectedNode,
  allNodes = [],
}: TemplateSidebarProps) => {
  const onDragStart = (event: React.DragEvent, template: TemplateDto) => {
    event.dataTransfer.setData(
      'application/reactflow',
      JSON.stringify(template),
    );
    event.dataTransfer.effectAllowed = 'move';
  };

  if (templates.length === 0) {
    return (
      <div style={{ padding: 24 }}>
        <Empty description="No templates available" />
      </div>
    );
  }

  // Get available input types for selected node
  const getAvailableInputTypesForSelectedNode = () => {
    if (!selectedNode || !selectedNode.data?.template) return [];

    const nodeTemplate = templates.find(
      (t) => t.name === selectedNode.data.template,
    );
    if (!nodeTemplate || !nodeTemplate.inputs) return [];

    return GraphValidationService.getAvailableConnectionTypes(
      selectedNode,
      templates,
    );
  };

  // Get required connections for selected node
  const getRequiredConnectionsForSelectedNode = () => {
    if (!selectedNode || !selectedNode.data?.template) return [];

    return GraphValidationService.getRequiredConnections(
      selectedNode,
      templates,
    );
  };

  // Check if a required connection is satisfied
  const isRequiredConnectionSatisfied = (connection: any) => {
    if (!selectedNode || !allNodes) return false;

    // Check if there are any edges that satisfy this required connection
    return allNodes.some((node) => {
      const nodeTemplate = templates.find(
        (t) => t.name === (node.data as unknown as GraphNodeData).template,
      );
      if (!nodeTemplate) return false;

      if (connection.type === 'kind') {
        return nodeTemplate.kind === connection.value;
      } else if (connection.type === 'template') {
        return nodeTemplate.name === connection.value;
      }
      return false;
    });
  };

  const availableInputTypes = getAvailableInputTypesForSelectedNode();
  const requiredConnections = getRequiredConnectionsForSelectedNode();
  const isAllRequiredConnected = requiredConnections.every(
    isRequiredConnectionSatisfied,
  );

  return (
    <div style={{ padding: 16, height: '100%', overflowY: 'auto' }}>
      <Title level={4} style={{ marginBottom: 16 }}>
        Templates
      </Title>

      {selectedNode && requiredConnections.length > 0 && (
        <>
          <div style={{ marginBottom: 16 }}>
            <Text
              type="secondary"
              style={{
                fontSize: 12,
                color: isAllRequiredConnected ? '#52c41a' : '#ff4d4f',
                fontWeight: 'bold',
              }}>
              Required connections for "{selectedNode.data.label}":
            </Text>
            <Space
              direction="vertical"
              style={{ width: '100%', marginTop: 8 }}
              size="small">
              {requiredConnections.map((connection, index) => {
                const isSatisfied = isRequiredConnectionSatisfied(connection);
                const isRed = !isSatisfied;

                return (
                  <Card
                    key={`required-${index}`}
                    size="small"
                    style={{
                      border: isRed ? '2px solid #ff4d4f' : '2px solid #52c41a',
                      background: isRed ? '#fff2f0' : '#f6ffed',
                    }}
                    styles={{ body: { padding: 8 } }}>
                    <Space
                      direction="vertical"
                      size="small"
                      style={{ width: '100%' }}>
                      <div
                        style={{
                          display: 'flex',
                          alignItems: 'center',
                          gap: 4,
                        }}>
                        <Text
                          strong
                          style={{
                            fontSize: 12,
                            color: isRed ? '#ff4d4f' : '#52c41a',
                          }}>
                          {connection.type}: {connection.value}
                        </Text>
                        <Tag
                          color={isRed ? 'red' : 'green'}
                          style={{ fontSize: 10 }}>
                          {isRed ? 'REQUIRED' : 'CONNECTED'}
                        </Tag>
                      </div>
                      <Text type="secondary" style={{ fontSize: 11 }}>
                        {isRed
                          ? 'This connection is mandatory for the node to function properly'
                          : 'This required connection is satisfied'}
                      </Text>
                    </Space>
                  </Card>
                );
              })}
            </Space>
          </div>
          <Divider style={{ margin: '16px 0' }} />
        </>
      )}

      {selectedNode && (
        <>
          <div style={{ marginBottom: 16 }}>
            <Text type="secondary" style={{ fontSize: 12 }}>
              Available inputs:
            </Text>
            {availableInputTypes.length > 0 ? (
              <div
                style={{
                  marginTop: 8,
                  display: 'flex',
                  gap: 12,
                  flexDirection: 'column',
                }}>
                {availableInputTypes.map((inputType, index) => (
                  <Card
                    key={`input-${index}`}
                    size="small"
                    style={{
                      border: '1px solid #1890ff',
                      background: '#f0f8ff',
                    }}
                    styles={{ body: { padding: 8 } }}>
                    <Space
                      direction="vertical"
                      size="small"
                      style={{ width: '100%' }}>
                      <div
                        style={{
                          display: 'flex',
                          alignItems: 'center',
                          gap: 4,
                          flexWrap: 'wrap',
                        }}>
                        <Text strong style={{ fontSize: 12 }}>
                          {inputType.type}: {inputType.value}
                        </Text>
                        {inputType.required && (
                          <Tag color="red" style={{ fontSize: 10 }}>
                            Required
                          </Tag>
                        )}
                        {inputType.multiple && (
                          <Tag color="orange" style={{ fontSize: 10 }}>
                            Multiple
                          </Tag>
                        )}
                      </div>
                      <Text type="secondary" style={{ fontSize: 11 }}>
                        This input type can accept connections from:
                      </Text>
                      <div
                        style={{
                          display: 'flex',
                          gap: 8,
                          flexWrap: 'wrap',
                          justifyContent: 'flex-start',
                        }}>
                        {inputType.availableTemplates.map((template) => (
                          <Tag
                            key={template.name}
                            color="blue"
                            style={{ fontSize: 10, margin: 0 }}>
                            {template.name}
                          </Tag>
                        ))}
                      </div>
                    </Space>
                  </Card>
                ))}
              </div>
            ) : (
              <div
                style={{
                  marginTop: 8,
                  padding: 12,
                  background: '#f5f5f5',
                  borderRadius: 4,
                  border: '1px solid #d9d9d9',
                }}>
                <Text
                  type="secondary"
                  style={{ fontSize: 12, color: '#8c8c8c' }}>
                  No available inputs for this node
                </Text>
              </div>
            )}
          </div>
          <Divider style={{ margin: '16px 0' }} />
        </>
      )}

      <Space direction="vertical" style={{ width: '100%' }} size="middle">
        {templates.map((template) => (
          <Card
            key={template.name}
            size="small"
            hoverable
            draggable
            onDragStart={(e) => onDragStart(e, template)}
            onClick={() => onTemplateClick(template)}
            style={{ cursor: 'grab' }}
            styles={{ body: { padding: 12 } }}>
            <Space direction="vertical" size="small" style={{ width: '100%' }}>
              <Text strong>{template.name}</Text>
              <Tag color="blue">{template.kind}</Tag>
              <Text type="secondary" style={{ fontSize: 12 }}>
                {template.description}
              </Text>
            </Space>
          </Card>
        ))}
      </Space>
    </div>
  );
};
