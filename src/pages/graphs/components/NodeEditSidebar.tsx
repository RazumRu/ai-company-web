import { useState, useEffect } from 'react';
import { Layout, Form, Input, Button, Typography, Space, Divider, message } from 'antd';
import { CloseOutlined, SaveOutlined } from '@ant-design/icons';
import type { GraphNode } from '../types';
import type { TemplateDto } from '../../../autogenerated';

const { Sider } = Layout;
const { Title, Text } = Typography;

interface NodeEditSidebarProps {
  node: GraphNode | null;
  visible: boolean;
  onClose: () => void;
  onSave: (nodeId: string, updates: { name?: string; config?: Record<string, any> }) => void;
}

interface FormField {
  key: string;
  name: string;
  description?: string;
  type: string;
  required?: boolean;
  default?: any;
}

export const NodeEditSidebar = ({ node, visible, onClose, onSave }: NodeEditSidebarProps) => {
  const [form] = Form.useForm();
  const [nodeName, setNodeName] = useState('');
  const [formFields, setFormFields] = useState<FormField[]>([]);

  useEffect(() => {
    if (node) {
      const nodeData = node.data as any;
      setNodeName(nodeData.label || '');
      
      // Generate form fields from template schema
      const templateSchema = nodeData.templateSchema;
      const fields: FormField[] = [];
      
      if (templateSchema?.schema?.properties) {
        Object.entries(templateSchema.schema.properties).forEach(([key, prop]: [string, any]) => {
          fields.push({
            key,
            name: prop.title || key,
            description: prop.description,
            type: prop.type || 'string',
            required: templateSchema.schema.required?.includes(key) || false,
            default: prop.default,
          });
        });
      }
      
      setFormFields(fields);
      
      // Set initial form values
      const initialValues: Record<string, any> = {};
      fields.forEach(field => {
        initialValues[field.key] = nodeData.config?.[field.key] ?? field.default ?? '';
      });
      form.setFieldsValue(initialValues);
    }
  }, [node, form]);

  const handleSave = async () => {
    try {
      const values = await form.validateFields();
      
      if (node) {
        onSave(node.id, {
          name: nodeName,
          config: values,
        });
        message.success('Node updated successfully');
        onClose();
      }
    } catch (error) {
      console.error('Form validation failed:', error);
    }
  };

  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNodeName(e.target.value);
  };

  const renderFormField = (field: FormField) => {
    const { key, name, description, type, required } = field;
    
    const commonProps = {
      key,
      name: key,
      label: name,
      required,
      tooltip: description,
    };

    switch (type) {
      case 'string':
        return (
          <Form.Item {...commonProps}>
            <Input placeholder={`Enter ${name.toLowerCase()}`} />
          </Form.Item>
        );
      
      case 'number':
        return (
          <Form.Item {...commonProps}>
            <Input type="number" placeholder={`Enter ${name.toLowerCase()}`} />
          </Form.Item>
        );
      
      case 'boolean':
        return (
          <Form.Item {...commonProps} valuePropName="checked">
            <input type="checkbox" />
          </Form.Item>
        );
      
      case 'array':
        return (
          <Form.Item {...commonProps}>
            <Input.TextArea 
              placeholder={`Enter ${name.toLowerCase()} (one per line)`}
              rows={3}
            />
          </Form.Item>
        );
      
      default:
        return (
          <Form.Item {...commonProps}>
            <Input placeholder={`Enter ${name.toLowerCase()}`} />
          </Form.Item>
        );
    }
  };

  if (!visible || !node) return null;

  const nodeData = node.data as any;
  const templateSchema = nodeData.templateSchema;

  return (
    <Sider
      width={400}
      style={{
        background: '#fff',
        borderLeft: '1px solid #f0f0f0',
        overflow: 'auto',
        height: '100%',
      }}>
      <div style={{ padding: '16px', height: '100%', display: 'flex', flexDirection: 'column' }}>
        {/* Header */}
        <div style={{ 
          display: 'flex', 
          justifyContent: 'space-between', 
          alignItems: 'center',
          marginBottom: 16,
          paddingBottom: 16,
          borderBottom: '1px solid #f0f0f0'
        }}>
          <Title level={4} style={{ margin: 0 }}>Edit Node</Title>
          <Space>
            <Button onClick={onClose} icon={<CloseOutlined />} size="small">
              Close
            </Button>
            <Button type="primary" onClick={handleSave} icon={<SaveOutlined />} size="small">
              Save
            </Button>
          </Space>
        </div>

        {/* Content */}
        <div style={{ flex: 1, overflow: 'auto' }}>
          <Space direction="vertical" size="large" style={{ width: '100%' }}>
            {/* Node Name */}
            <div>
              <Title level={5}>Node Name</Title>
              <Input
                value={nodeName}
                onChange={handleNameChange}
                placeholder="Enter node name"
                style={{ marginBottom: 16 }}
              />
            </div>

            <Divider />

            {/* Template Info */}
            <div>
              <Title level={5}>Template Information</Title>
              <Space direction="vertical" size="small">
                <div>
                  <Text strong>Template:</Text> {nodeData.template}
                </div>
                {templateSchema?.kind && (
                  <div>
                    <Text strong>Type:</Text> {templateSchema.kind}
                  </div>
                )}
                {templateSchema?.description && (
                  <div>
                    <Text strong>Description:</Text> {templateSchema.description}
                  </div>
                )}
              </Space>
            </div>

            <Divider />

            {/* Dynamic Form Fields */}
            {formFields.length > 0 ? (
              <div>
                <Title level={5}>Configuration</Title>
                <Form form={form} layout="vertical">
                  {formFields.map(renderFormField)}
                </Form>
              </div>
            ) : (
              <div>
                <Title level={5}>Configuration</Title>
                <Text type="secondary">No configuration options available for this template.</Text>
              </div>
            )}
          </Space>
        </div>
      </div>
    </Sider>
  );
};
