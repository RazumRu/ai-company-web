import {
  ReactFlow,
  Controls,
  Background,
  MiniMap,
  addEdge,
  Connection,
  Node,
  Edge,
  NodeTypes,
  BackgroundVariant,
  OnNodesChange,
  OnEdgesChange,
  Viewport,
} from '@xyflow/react';
import '@xyflow/react/dist/style.css';
import { useCallback, useRef } from 'react';
import { CustomNode } from './CustomNode';
import type { GraphNode, GraphEdge } from '../types';
import type { TemplateDto } from '../../../autogenerated';

const nodeTypes: NodeTypes = {
  custom: CustomNode,
};

interface GraphCanvasProps {
  nodes: GraphNode[];
  edges: GraphEdge[];
  onNodesChange: OnNodesChange;
  onEdgesChange: OnEdgesChange;
  onNodeAdd: (node: GraphNode) => void;
  onNodeEdit: (node: GraphNode) => void;
  onNodeDelete: (nodeId: string) => void;
  onNodeSelect?: (node: GraphNode | null) => void;
  onViewportChange?: (viewport: Viewport) => void;
  initialViewport?: Viewport;
}

export const GraphCanvas = ({
  nodes,
  edges,
  onNodesChange,
  onEdgesChange,
  onNodeAdd,
  onNodeEdit,
  onNodeDelete,
  onNodeSelect,
  onViewportChange,
  initialViewport,
}: GraphCanvasProps) => {
  const reactFlowRef = useRef<any>(null);

  // Enhance nodes with callback functions
  const enhancedNodes = nodes.map((node) => ({
    ...node,
    data: {
      ...node.data,
      onEdit: () => onNodeEdit(node),
      onDelete: () => onNodeDelete(node.id),
    },
  }));
  const onConnect = useCallback(
    (params: Connection) => {
      const newEdge = {
        id: `edge-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        source: params.source || '',
        target: params.target || '',
        sourceHandle: params.sourceHandle,
        targetHandle: params.targetHandle,
      };
      onEdgesChange([
        {
          type: 'add',
          item: newEdge,
        },
      ] as any);
    },
    [onEdgesChange],
  );

  const onDragOver = useCallback((event: React.DragEvent) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = 'move';
  }, []);

  const onDrop = useCallback(
    (event: React.DragEvent) => {
      event.preventDefault();

      const templateData = event.dataTransfer.getData('application/reactflow');
      if (!templateData) return;

      const template: TemplateDto = JSON.parse(templateData);

      // Get the position where the node is dropped
      const reactFlowBounds = (
        event.target as HTMLElement
      ).getBoundingClientRect();
      const position = {
        x: event.clientX - reactFlowBounds.left - 75,
        y: event.clientY - reactFlowBounds.top - 25,
      };

      const newNode: GraphNode = {
        id: `node-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        type: 'custom',
        position,
        data: {
          label: template.name,
          template: template.name,
          config: {},
          templateSchema: template,
        },
      };

      onNodeAdd(newNode);
    },
    [onNodeAdd],
  );

  const handleNodeDoubleClick = useCallback(
    (_event: React.MouseEvent, node: Node) => {
      onNodeEdit(node as GraphNode);
    },
    [onNodeEdit],
  );

  const handleNodeClick = useCallback(
    (_event: React.MouseEvent, node: Node) => {
      onNodeSelect?.(node as GraphNode);
    },
    [onNodeSelect],
  );

  const handlePaneClick = useCallback(() => {
    onNodeSelect?.(null);
  }, [onNodeSelect]);

  const handleViewportChange = useCallback(
    (viewport: Viewport) => {
      onViewportChange?.(viewport);
    },
    [onViewportChange],
  );

  return (
    <div style={{ width: '100%', height: '100%' }}>
      <ReactFlow
        ref={reactFlowRef}
        nodes={enhancedNodes as Node[]}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        onDrop={onDrop}
        onDragOver={onDragOver}
        onNodeClick={handleNodeClick}
        onNodeDoubleClick={handleNodeDoubleClick}
        onPaneClick={handlePaneClick}
        onViewportChange={handleViewportChange}
        nodeTypes={nodeTypes}
        fitView={!initialViewport}
        deleteKeyCode="Delete"
        defaultViewport={initialViewport}>
        <Controls />
        <MiniMap />
        <Background variant={BackgroundVariant.Dots} gap={12} size={1} />
      </ReactFlow>
    </div>
  );
};
