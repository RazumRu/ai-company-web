import { useEffect, useMemo, useRef, useState } from 'react';
import { Handle, NodeProps, Position, useStore } from '@xyflow/react';
import { Button, Card, Space, Tag, Tooltip, Typography } from 'antd';
import { DeleteOutlined, ExclamationCircleOutlined } from '@ant-design/icons';
import type { GraphEdge, GraphNode, GraphNodeData } from '../types';
import { GraphValidationService } from '../../../services/GraphValidationService';
import type { TemplateDto } from '../../../autogenerated';

const { Text } = Typography;

interface CustomNodeProps extends NodeProps {
  templates?: TemplateDto[];
}

export const CustomNode = ({
  id: nodeId,
  data,
  selected,
  templates = [],
  isConnectable = true,
}: CustomNodeProps) => {
  const nodeData = data as unknown as GraphNodeData;
  const allNodes = useStore((s) => s.nodes) as unknown as GraphNode[];
  const allEdges = useStore((s) => s.edges) as unknown as GraphEdge[];
  const nodeTemplate = templates?.find((t) => t.name === nodeData.template);

  const getKindColor = (kind?: string) => {
    const map: Record<string, string> = {
      runtime: 'blue',
      tool: 'green',
      simpleagent: 'orange',
      trigger: 'red',
      resource: 'purple',
      default: 'gray',
    };
    return map[kind?.toLowerCase() || 'default'] || 'gray';
  };

  const getMetadataProperties = () => {
    if (!nodeData.templateSchema?.properties) return [];
    return Object.entries(nodeData.templateSchema.properties)
      .filter(([_, prop]) => (prop as any)['x-ui:show-on-node'] === true)
      .map(([key, prop]) => {
        const p = prop as any;
        return {
          key,
          value: nodeData.config[key] || p.const || p.default || '',
          title: p.title || key,
        };
      })
      .filter((x) => !!x.value);
  };

  const metadataProperties = getMetadataProperties();

  const validationErrors =
    templates.length > 0 && allNodes.length > 0 && allEdges.length > 0
      ? GraphValidationService.getNodeValidationErrors(
          nodeId,
          allNodes,
          allEdges,
          templates,
        )
      : [];
  const hasValidationErrors = validationErrors.length > 0;

  const inputRules =
    templates.length > 0 && nodeId
      ? GraphValidationService.getAvailableConnectionTypes(
          {
            id: nodeId,
            data: nodeData,
            position: { x: 0, y: 0 },
            type: 'custom',
          } as unknown as GraphNode,
          templates,
        )
      : [];

  const rootRef = useRef<HTMLDivElement | null>(null);
  const contentRef = useRef<HTMLDivElement | null>(null);
  const [contentH, setContentH] = useState(80);
  useEffect(() => {
    if (!contentRef.current) return;
    const ro = new ResizeObserver((e) =>
      setContentH(e[0]?.contentRect.height || 80),
    );
    ro.observe(contentRef.current);
    return () => ro.disconnect();
  }, []);

  const targets = useMemo(() => inputRules, [inputRules]);

  const outMissing =
    inputRules.some((r) => r.required) && !allEdges.some((e) => e.source === nodeId);
  const color = (
    role: 'target' | 'source',
    _required: boolean,
    missing: boolean,
  ) => {
    if (missing) {
      return {
        bg: '#ff4d4f',
        br: '2px solid white',
        sh: '0 0 0 1px rgba(255,77,79,0.5)',
      };
    }
    if (role === 'source') {
      return {
        bg: '#52c41a',
        br: '2px solid white',
        sh: '0 0 0 1px rgba(82,196,26,0.5)',
      };
    }
    return {
      bg: '#1890ff',
      br: '2px solid white',
      sh: '0 0 0 1px rgba(24,144,255,0.5)',
    };
  };

  return (
    <Card
      size="small"
      style={{
        minWidth: 300,
        position: 'relative',
        zIndex: 1,
        border: hasValidationErrors
          ? '2px solid #ff4d4f'
          : selected
            ? '1px solid #1890ff'
            : '1px solid #d9d9d9',
        borderRadius: 8,
        boxShadow: hasValidationErrors
          ? '0 4px 12px rgba(255, 77, 79, 0.3)'
          : selected
            ? '0 4px 12px rgba(24, 144, 255, 0.3)'
            : '0 2px 8px rgba(0, 0, 0, 0.1)',
      }}
      styles={{ body: { padding: 12, position: 'relative' } }}>
      <div
        style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          gap: 15,
        }}>
        <Space size="small">
          <Text
            strong
            style={{
              fontSize: 14,
              overflow: 'hidden',
              textOverflow: 'ellipsis',
              whiteSpace: 'nowrap',
              maxWidth: 260,
              display: 'block',
            }}>
            {nodeData.label}
          </Text>
          <Tag
            color={getKindColor(nodeData.templateKind)}
            style={{ margin: 0, fontSize: 10 }}>
            {nodeData.templateKind}
          </Tag>
          <Tag color="geekblue" style={{ margin: 0, fontSize: 10 }}>
            {nodeData.template}
          </Tag>
        </Space>
        <Space size="small">
          {hasValidationErrors && (
            <Tooltip
              title={
                <div>
                  <div style={{ fontWeight: 'bold', marginBottom: 4 }}>
                    Validation Errors:
                  </div>
                  {validationErrors.map((e, i) => (
                    <div key={i} style={{ fontSize: 12 }}>
                      • {e.message}
                    </div>
                  ))}
                </div>
              }
              placement="top">
              <ExclamationCircleOutlined
                style={{ color: '#ff4d4f', fontSize: 16, cursor: 'help' }}
              />
            </Tooltip>
          )}
          {nodeData.onDelete && (
            <Button
              type="text"
              size="small"
              danger
              icon={<DeleteOutlined />}
              onClick={(e) => {
                e.stopPropagation();
                nodeData.onDelete?.();
              }}
            />
          )}
        </Space>
      </div>

      {Object.keys(nodeData.config).length > 0 && (
        <Text type="secondary" style={{ fontSize: 11, display: 'block' }}>
          {Object.keys(nodeData.config).length} parameter(s)
        </Text>
      )}

      <div ref={contentRef} style={{ position: 'relative', marginTop: 3 }}>
        {metadataProperties.length > 0 && (
          <div style={{ display: 'flex', flexWrap: 'wrap', gap: 4 }}>
            {metadataProperties.map(({ key, value, title }) => (
              <Tag
                key={key}
                color="default"
                style={{ fontSize: 10, margin: 0 }}>
                {title}: {String(value)}
              </Tag>
            ))}
          </div>
        )}

        <Text
          type="secondary"
          style={{
            fontSize: 12,
            display: 'block',
            marginTop: 5,
            overflow: 'hidden',
            textOverflow: 'ellipsis',
            whiteSpace: 'nowrap',
          }}>
          {nodeTemplate?.description}
        </Text>
      </div>

      <div
        style={{
          position: 'absolute',
          top: 0,
          left: 0,
          height: '100%',
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          gap: 8,
        }}>
        {targets.map((t, i) => {
          const id = `target-${t.type}-${t.value}`;
          const miss = t.required && !allEdges.some((e) => e.target === nodeId);
          const c = color('target', t.required, miss);
          return (
            <Tooltip
              key={id}
              title={
                <div>
                  <div style={{ fontWeight: 'bold', marginBottom: 4 }}>
                    {t.type}: {t.value}
                    {t.required && ' (Required)'}
                    {t.multiple && ' (Multiple)'}
                  </div>
                  <div style={{ fontSize: 12, marginBottom: 4 }}>
                    Available templates:
                  </div>
                  {t.availableTemplates.map((template, idx) => (
                    <div key={idx} style={{ fontSize: 11, marginLeft: 8 }}>
                      • {template.name} ({template.kind})
                    </div>
                  ))}
                  {miss && (
                    <div style={{ fontSize: 11, color: '#ff4d4f', marginTop: 4 }}>
                      ⚠️ This connection is required
                    </div>
                  )}
                </div>
              }
              placement="right"
              mouseEnterDelay={0.1}>
              <Handle
                type="target"
                id={id}
                isConnectable={isConnectable}
                position={Position.Left}
                style={{
                  width: '12px',
                  height: '12px',
                  position: 'relative',
                  transform: 'none',
                  left: '-6px',
                  top: 0,
                  background: c.bg,
                  border: c.br,
                  boxShadow: c.sh,
                }}
              />
            </Tooltip>
          );
        })}
      </div>

      <div
        style={{
          position: 'absolute',
          top: 0,
          right: 0,
          height: '100%',
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          gap: 8,
        }}>
        {nodeTemplate?.outputs?.map((output, i) => {
          const id = `source-${output.type}-${output.value}`;
          const c = color('source', output.required || false, false);
          return (
            <Tooltip
              key={id}
              title={
                <div>
                  <div style={{ fontWeight: 'bold', marginBottom: 4 }}>
                    {output.type}: {output.value}
                    {output.required && ' (Required)'}
                    {output.multiple && ' (Multiple)'}
                  </div>
                  <div style={{ fontSize: 12 }}>
                    Output connection
                  </div>
                </div>
              }
              placement="left"
              mouseEnterDelay={0.1}>
              <Handle
                type="source"
                id={id}
                isConnectable={isConnectable}
                position={Position.Right}
                style={{
                  background: c.bg,
                  border: c.br,
                  boxShadow: c.sh,
                  width: '12px',
                  height: '12px',
                  position: 'relative',
                  transform: 'none',
                  right: '-6px',
                  top: 0,
                }}
              />
            </Tooltip>
          );
        })}
        {(!nodeTemplate?.outputs || nodeTemplate.outputs.length === 0) && (
          <Tooltip title="output" placement="left" mouseEnterDelay={0.1}>
            <Handle
              type="source"
              id="source-out"
              isConnectable={isConnectable}
              position={Position.Right}
              style={{
                background: color('source', false, outMissing).bg,
                border: color('source', false, outMissing).br,
                boxShadow: color('source', false, outMissing).sh,
                width: '12px',
                height: '12px',
                position: 'relative',
                transform: 'none',
                right: '-6px',
                top: 0,
              }}
            />
          </Tooltip>
        )}
      </div>
    </Card>
  );
};
