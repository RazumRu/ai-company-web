import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router';
import {
  Button,
  Card,
  Empty,
  message,
  Popconfirm,
  Space,
  Spin,
  Tag,
  Typography,
} from 'antd';
import {
  CalendarOutlined,
  DeleteOutlined,
  NodeIndexOutlined,
  PlusOutlined,
} from '@ant-design/icons';
import { graphsApi } from '../../api';
import type { GraphDto } from '../../autogenerated';
import { format } from 'date-fns';

const { Title, Text } = Typography;

export const GraphsListPage = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [deleting, setDeleting] = useState<string | null>(null);
  const [graphs, setGraphs] = useState<GraphDto[]>([]);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    let mounted = true;
    (async () => {
      try {
        const res = await graphsApi.getAllGraphs();
        if (!mounted) return;
        setGraphs(res.data || []);
      } catch (e) {
        if (!mounted) return;
        console.error('Error fetching graphs:', e);
        setError('Failed to load graphs');
      } finally {
        if (mounted) setLoading(false);
      }
    })();
    return () => {
      mounted = false;
    };
  }, []);

  const handleCreateGraph = async () => {
    try {
      const res = await graphsApi.createGraph({
        name: `New Graph ${new Date().toLocaleString()}`,
        description: 'A new graph',
        version: '1.0.0',
        schema: {
          nodes: [],
          edges: [],
        },
      });

      const graphId = res.data.id;
      message.success('Graph created successfully');
      navigate(`/graphs/${graphId}`);
    } catch (e: unknown) {
      console.error('Error creating graph:', e);
      const errorMessage = e instanceof Error ? e.message : 'Failed to create graph';
      message.error(errorMessage);
    }
  };

  const handleDeleteGraph = async (graphId: string) => {
    setDeleting(graphId);
    try {
      await graphsApi.deleteGraph(graphId);
      setGraphs((prev) => prev.filter((graph) => graph.id !== graphId));
      message.success('Graph deleted successfully');
    } catch (e: unknown) {
      console.error('Error deleting graph:', e);
      const errorMessage = e instanceof Error ? e.message : 'Failed to delete graph';
      message.error(errorMessage);
    } finally {
      setDeleting(null);
    }
  };

  const handleEditGraph = (graphId: string) => {
    navigate(`/graphs/${graphId}`);
  };

  const getNodeCount = (graph: GraphDto) => {
    return graph.schema?.nodes?.length || 0;
  };

  const getStatusTag = (graph: GraphDto) => {
    // You can customize this logic based on your business rules
    if (graph.temporary) {
      return <Tag color="orange">Draft</Tag>;
    }
    return <Tag color="green">Active</Tag>;
  };

  if (loading) {
    return (
      <div
        style={{
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          height: '50vh',
        }}>
        <Spin size="large" />
      </div>
    );
  }

  if (error) {
    return (
      <div style={{ padding: 24, textAlign: 'center' }}>
        <Text type="danger">{error}</Text>
      </div>
    );
  }

  return (
    <div style={{ padding: 24 }}>
      <div
        style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          marginBottom: 24,
        }}>
        <Title level={2} style={{ margin: 0 }}>
          Graphs
        </Title>
        <Button
          type="primary"
          icon={<PlusOutlined />}
          onClick={handleCreateGraph}
          size="large">
          Create New Graph
        </Button>
      </div>

      {graphs.length === 0 ? (
        <Empty
          description="No graphs found"
          image={Empty.PRESENTED_IMAGE_SIMPLE}>
          <Button type="primary" onClick={handleCreateGraph}>
            Create your first graph
          </Button>
        </Empty>
      ) : (
        <Space direction="vertical" size="middle" style={{ width: '100%' }}>
          {graphs.map((graph) => (
            <Card
              onClick={() => handleEditGraph(graph.id)}
              key={graph.id}
              hoverable
              style={{ width: '100%' }}
              styles={{
                body: { padding: '16px 20px' },
              }}>
              <div style={{ position: 'relative' }}>
                {/* Top right action buttons */}
                <div
                  style={{
                    position: 'absolute',
                    top: 0,
                    right: 0,
                    display: 'flex',
                    gap: 8,
                  }}>
                  <Popconfirm
                    title="Delete Graph"
                    description="Are you sure you want to delete this graph? This action cannot be undone."
                    onConfirm={() => handleDeleteGraph(graph.id)}
                    okText="Yes, Delete"
                    cancelText="Cancel"
                    okType="danger">
                    <Button
                      type="text"
                      danger
                      icon={<DeleteOutlined />}
                      loading={deleting === graph.id}
                      size="middle"
                    />
                  </Popconfirm>
                </div>

                {/* Title and status tags */}
                <div
                  style={{
                    display: 'flex',
                    alignItems: 'center',
                    paddingRight: 80, // Space for action buttons
                    gap: 15,
                  }}>
                  <Text strong style={{ fontSize: 18 }}>
                    {graph.name}
                  </Text>
                  <Space size="small">
                    {getStatusTag(graph)}
                    {graph.temporary && <Tag color="orange">Temporary</Tag>}
                  </Space>
                </div>

                {/* Version and node count */}
                <div>
                  <Text type="secondary" style={{ fontSize: 12 }}>
                    Version {graph.version} â€¢ <NodeIndexOutlined />{' '}
                    {getNodeCount(graph)} nodes
                  </Text>
                </div>

                {/* Create date */}
                <div style={{ marginBottom: 8 }}>
                  <Text type="secondary" style={{ fontSize: 12 }}>
                    <CalendarOutlined style={{ marginRight: 4 }} />
                    {format(
                      graph.createdAt || graph.updatedAt || '',
                      "dd.LL.yyyy '-' HH:mm",
                    )}
                  </Text>
                </div>

                {/* Description */}
                {graph.description && (
                  <div>
                    <Text style={{ fontSize: 14 }}>{graph.description}</Text>
                  </div>
                )}
              </div>
            </Card>
          ))}
        </Space>
      )}
    </div>
  );
};
